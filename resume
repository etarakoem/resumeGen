#!/bin/bash

# Keywords store in .files folder:
source=".files/rec"
qualify=".files/qualiSum"
# Keywords files.
qa=".files/QAKey"
web=".files/webKey"
security=".files/secKey"
dev=".files/devKey"

printf "Please provide the Job Number \nJob number: "
read jobNum

printf "Please provide Company name \nCompany name: "
read companyName
companyName="${companyName// /_}"

printf "\nPlease provide Company Requirement \nOnce done, press Ctrl + D\n"

input=$(cat)

touch rec

echo $input > rec

# Must include Keywords script
secCount=`.files/keywords rec $security`
webCount=`.files/keywords rec $web`
qaCount=`.files/keywords rec $qa`
devCount=`.files/keywords rec $dev`

printf "
========Job Matches========\n
SoftDev matches:  $devCount\n
Security matches: $secCount\n
QA matches:       $qaCount\n
WebDev matches:   $webCount\n
===========================\n"

#Default Resume as CyberSecurity:
bank=$security

findMax () {
    max=$1
    shift 
    count=1
    result=1
    for i in "$@"
    do
	((count++))
	if [[ $i -gt $max ]]
	then 
	    result=$count
	    max=$i
	fi
    done
    printf "This job is best suit for "
    case $result in
	1)
	    echo "Software Dev"
	    bank=$dev
	    ;;
	2)
	    echo "Security"
	    bank=$security
	    ;;
	3)
	    echo "QA"
	    bank=$qa
	    ;;
	4)
	    echo "Fullstack"
	    bank=$web
	    ;;
    esac
}

if [[ $devCount -eq 0 && $secCount -eq 0 && $qaCount -eq 0 && $webCount -eq 0 ]]
then
    echo "General Resume, Is this a Technical Job even?"
    bank=".files/general"
else
    findMax $devCount $secCount $qaCount $webCount
fi

declare -a listquali

requirement=".files/qualiSum"

declare -a list=($(cat $bank | tr '\n' ' '))

for item in ${list[@]}
do
    listquali+=(`grep -ni "$item" $requirement | cut -f1 -d:`)
done

sorted=($(echo "${listquali[@]}" | tr ' ' '\n' | sort -nu | tr '\n' ' '))

for i in $(seq 1 5)
do
    if [[ ${#sorted[@]} -lt 6 ]] && [[ ! " ${sorted[*]} " =~ " $i " ]]
    then
	sorted+=($i)
    fi
done

sorted=($(echo "${sorted[@]}" | tr ' ' '\n' | sort -nu | tr '\n' ' '))

htmlList () {
    line=$3
    content=`sed "${line}q;d" $2`
    echo "<li>$content</li>" >> $1
}

outfile=$companyName.html

htmlAcademic () {
    start=0
    end=0
    name=0
    date=0
    file=".files/academic"
    case $1 in
	1)
	    name=1
	    date=2
	    start=3
	    end=5
	    ;;
	2)
	    name=6
	    date=7
	    start=8
	    end=10
	    ;;
	3)
	    name=11
	    date=12
	    start=13
	    end=15
	    ;;
	4)
	    name=16
	    date=17
	    start=18
	    end=19
	    ;;
	5)
	    name=20
	    date=21
	    start=22
	    end=25
	    ;;
	*)
	    echo "Academic not found. Exiting..."
	    exit 1
	    ;;
    esac
    
    getName=`sed "${name}q;d" $file`
    getDate=`sed "${date}q;d" $file`
    
    echo '<div class="column left">' >> $2
    echo "<p><strong>$getName</strong></p></div>" >> $2
    echo '<div class="column right">' >> $2
    echo "<p>$getDate</p></div><ul>" >> $2

    for i in $(seq $start $end);
    do
	htmlList $2 $file $i;
    done
    echo "</ul>" >> $2
}

# Add the CSS style
cat <<EOF> $outfile
<!Doctype html>
<html>
  <style>
    h1 {
	text-align: center;
	font-size: 40px;
	font-family: Arial;
	background-color: #FFF;
    }

    h2 {
	text-align: left;
	font-size: 25px;
	font-family: Arial;
	background-color: #fff; 
	margin-bottom: 0px;
    }

    p {
	font-size: 15px;
	font-family: Arial;
	margin-top: 5px;
    }

    ul {
	margin-top: 5px;
	margin-bottom: 5px;
	background-color: #fff;
	padding-left: 10%;
	padding-right: 10%;
	font-family: Arial;
    }
    .column {
	float: left;
	background-color: #fff;
	margin-bottom: 5px;
	margin-top: 0px;
    }
    .right {
	width: 30%;
	text-indent: 5%;
    }
    .left {
	width: 70%;
	text-indent: 5%;
    }
    .white {
	padding-top: 0%;
	background-color: white;
    }
    .blue {
	color: blue;
	text-decoration: underline;
    }
    
    
  </style>
  
  <body>

    <h1 style="margin-bottom:0;">Phuc Hua</h1>
    <p style="text-align: center; margin: 0; padding-top : 0;">Mississauga,ON  | 416 839 8948 | <span class="blue">samuel.phuc.hua@gmail.com</span> | <span class="blue">https://www.linkedin.com/in/samuel-hua/</span>
    </p>
EOF


# Adding Qualification summary depends on Job Posting
htmlQualiSum () {
    local out=$1
    local file=$2
    shift 2
    # Remember to pass in list as array
    echo "<h2>Qualification Summary</h2>" >> $out
    echo "<ul>" >> $out
    arr=("$@")
    for i in "${arr[@]}"
    do
	htmlList $out $file $i
    done
    echo "</ul>" >> $out
}

# Changable sequence for each kind of job

htmlQualiSum $outfile $qualify ${sorted[@]}

# Adding Academic Project:
echo "<h2>Academic project:</h2>" >> $outfile

# List changeable
for i in 1 3 4 5
do
    htmlAcademic $i $outfile
done

#Education Pasting part

cat<<'EOF'>> $outfile
   <h2>Education</h2>
    <div class="column left white">
      <p>Bachelor of Science, Computer Science Ryerson University</p>
    </div>
    <div class="column right">
      <p>September 2020 - present</p>
    </div>
    <div class="column left white">
      <p>Expected graduation: June 2024 </p>
      <p>CGPA: 3.4/4.33</p>
    </div>
    </body>	
</html>
EOF


# Main Program
if test -z "$jobNum"
then
    namePDF="Phuc-Hua_Resume".pdf
else
    namePDF="Phuc-Hua_Resume_$jobNum".pdf
fi

.files/pdf $outfile $namePDF


if [ "$#" -eq 0 ]; then
    mv $namePDF SingleResume
    echo "File successfully save as $namePDF in SingleResume folder"
else
    mv $namePDF $1
    echo "File successfully save as $namePDF in $1 folder"
fi

rm $outfile
rm rec
