#!/bin/bash

if [[ "$#" -gt 0 ]]
then
    printf "Generating scripting cover Letter \n"
fi

# Keywords store in .files folder:
source=".files/rec"
qualify=".files/qualiSum"
# Keywords files.
qa=".files/QAKey"
web=".files/webKey"
security=".files/secKey"
dev=".files/devKey"

printf "Please provide a folder name for this job. \nThe folder must have different name than the company name \n
Folder name to save at: "

read folder
mkdir $folder

# Get Job number
printf "Job Number: "
read jobNum

# Get Company name

printf "Please provide Company name \nCompany name: "
read companyName

# Get date today
day=`date "+%B %d, %Y"`

# Get company's goal
printf "Company's Goal: "
read companyGoal

# Generate the file (You should make the file name as the name of the company you're applying)

NameSet=$companyName
companyName="${companyName// /_}"

fileName=coverLetter_$companyName.html

.files/htmlFormat $fileName

printf "<p><strong>Job Number: </strong> $jobNum</p>" >> $fileName
printf "<p><strong>Availability: </strong> 4 months (May-August 2021)</p>" >> $fileName
printf "<p>$day</p>" >> $fileName
printf "<p>Dear Hiring Manager</p>" >> $fileName

if [ "$#" -eq 0 ]
then
    printf "<p>It is my great pleasure to apply for the Computer Science Co-op role with $NameSet as posted internally by the Ryerson Co-op Office. As a 2nd-year Computer Science Co-op student at Ryerson University who is passionate about analyzing problems, learning and analyzing malware for cybersecurity issues, this opportunity caught my attention. With my proven academic excellence and certificate, I am confident that my familiarity with Cybersecurity, Web server networking, Penetration testing knowledge would qualify me as a competitive candidate for this position.</p>" >> $fileName

    printf "<p>$NameSet$companyGoal aligns with my passion for automating scripting. Directly related to the requirements of this role, my main studies focus deeply on ethical hacking and prepared me well to do penetration testing. To prove this matter, I spent 1 year and a half years self-studying and preparing for the OSCP (Offensive Security Certified Professional) certificate, which focuses heavily on penetration testing and writing reports. During this time, I managed to adapt Bash scripting skill into automating my own resume and cover letter generator. My script scans for specific keywords on the job's description and generates a corresponding resume, reaching 40 resumes applications under 4 hours. As a Co-op student, I would love to contribute my understanding and skill in terms of making automated scripts to automate repeatable tasks, build new secured applications, or protect clients and implement safety measures to fight against data breaches and system severity.</p>" >> $fileName
else
    printf "<p>It is my great pleasure to apply for the Computer Science Co-op role with $NameSet as posted internally by the Ryerson Co-op Office. As a 2nd-year Computer Science Co-op student at Ryerson University who is passionate about analyzing problems, learning and analyzing malware for cybersecurity issues, this opportunity caught my attention. With my proven academic excellence and certificate, I am confident that my familiarity with Cybersecurity, Scripting, Penetration testing knowledge would qualify me as a competitive candidate for this position.</p>" >> $fileName

    printf "<p>$NameSet$companyGoal aligns with my passion for automate scripting. Directly related to the requirements of this role, my main studies focus deeply on ethical hacking and prepared me well to do penetration testing. To prove this matter, I spent 1 year and a half years self-studying and preparing for the OSCP (Offensive Security Certified Professional) certificate, which focuses heavily on penetration testing and writing reports. During this time, I managed to adapt Bash scripting skill into automate my own resume and cover letter generator. My script scan for specific keywords on the job's description and generate a coresponding resume, reaching to 40 resumes applications under 4 hours. As a Co-op student, I would love to contribute my understanding and skill in terms of making automate script to automate repeatable task, build new secured application, or protect clients and implementing safety measures to fight against data breaches and system severity.</p>" >> $fileName
fi

printf "<p>Thank you for your time and consideration. With the details listed above that I can bring to $NameSet, I have the commitment and a strong passion for security to succeed as a Co-op student. I would appreciate the chance to meet with you to speak more about this opportunity. 
Sincerely,</p>
" >> $fileName

printf "<p>Phuc Hua</p>\n
</body> 
</html>" >> $fileName

if test -z "$jobNum"
then
    namePDF="Phuc-Hua_CoverLetter".pdf
else  
    namePDF=Phuc-Hua_$jobNum"_CoverLetter.pdf"
fi

.files/pdf $fileName $namePDF

mv $namePDF $folder

rm $fileName

printf "\nSuccessfully created $namePDF in $folder\n"

printf "\nPlease provide Company Requirement \nOnce done, press Ctrl + D\n"

input=$(cat)

touch rec

echo $input > rec

# Must include Keywords script
secCount=`.files/keywords rec $security`
webCount=`.files/keywords rec $web`
qaCount=`.files/keywords rec $qa`
devCount=`.files/keywords rec $dev`

printf "
========Job Matches========\n
SoftDev matches:  $devCount\n
Security matches: $secCount\n
QA matches:       $qaCount\n
WebDev matches:   $webCount\n
===========================\n"

#Default Resume as CyberSecurity:
bank=$security

findMax () {
    max=$1
    shift 
    count=1
    result=1
    for i in "$@"
    do
	((count++))
	if [[ $i -gt $max ]]
	then 
	    result=$count
	    max=$i
	fi
    done
    printf "This job is best suit for "
    case $result in
	1)
	    echo "Software Dev"
	    bank=$dev
	    ;;
	2)
	    echo "Security"
	    bank=$security
	    ;;
	3)
	    echo "QA"
	    bank=$qa
	    ;;
	4)
	    echo "Fullstack"
	    bank=$web
	    ;;
    esac
}

if [[ $devCount -eq 0 && $secCount -eq 0 && $qaCount -eq 0 && $webCount -eq 0 ]]
then
    echo "General Resume, Is this a Technical Job even?"
    bank=".files/general"
else
    findMax $devCount $secCount $qaCount $webCount
fi

declare -a listquali

requirement=".files/qualiSum"

declare -a list=($(cat $bank | tr '\n' ' '))

for item in ${list[@]}
do
    listquali+=(`grep -ni "$item" $requirement | cut -f1 -d:`)
done

sorted=($(echo "${listquali[@]}" | tr ' ' '\n' | sort -nu | tr '\n' ' '))

for i in $(seq 1 5)
do
    if [[ ${#sorted[@]} -lt 6 ]] && [[ ! " ${sorted[*]} " =~ " $i " ]]
    then
	sorted+=($i)
    fi
done

sorted=($(echo "${sorted[@]}" | tr ' ' '\n' | sort -nu | tr '\n' ' '))

htmlList () {
    line=$3
    content=`sed "${line}q;d" $2`
    echo "<li>$content</li>" >> $1
}

outfile=$companyName.html

htmlAcademic () {
    start=0
    end=0
    name=0
    date=0
    file=".files/academic"
    case $1 in
	1)
	    name=1
	    date=2
	    start=3
	    end=5
	    ;;
	2)
	    name=6
	    date=7
	    start=8
	    end=10
	    ;;
	3)
	    name=11
	    date=12
	    start=13
	    end=15
	    ;;
	4)
	    name=16
	    date=17
	    start=18
	    end=19
	    ;;
	5)
	    name=20
	    date=21
	    start=22
	    end=25
	    ;;
	*)
	    echo "Academic not found. Exiting..."
	    exit 1
	    ;;
    esac
    
    getName=`sed "${name}q;d" $file`
    getDate=`sed "${date}q;d" $file`
    
    echo '<div class="column left">' >> $2
    echo "<p><strong>$getName</strong></p></div>" >> $2
    echo '<div class="column right">' >> $2
    echo "<p>$getDate</p></div><ul>" >> $2

    for i in $(seq $start $end);
    do
	htmlList $2 $file $i;
    done
    echo "</ul>" >> $2
}

# Add the CSS style
cat <<EOF> $outfile
<!Doctype html>
<html>
  <style>
    h1 {
	text-align: center;
	font-size: 40px;
	font-family: Arial;
	background-color: #FFF;
    }

    h2 {
	text-align: left;
	font-size: 25px;
	font-family: Arial;
	background-color: #fff; 
	margin-bottom: 0px;
    }

    p {
	font-size: 15px;
	font-family: Arial;
	margin-top: 5px;
    }

    ul {
	margin-top: 5px;
	margin-bottom: 5px;
	background-color: #fff;
	padding-left: 10%;
	padding-right: 10%;
	font-family: Arial;
    }
    .column {
	float: left;
	background-color: #fff;
	margin-bottom: 5px;
	margin-top: 0px;
    }
    .right {
	width: 30%;
	text-indent: 5%;
    }
    .left {
	width: 70%;
	text-indent: 5%;
    }
    .white {
	padding-top: 0%;
	background-color: white;
    }
    .blue {
	color: blue;
	text-decoration: underline;
    }
    
    
  </style>
  
  <body>

    <h1 style="margin-bottom:0;">Phuc Hua</h1>
    <p style="text-align: center; margin: 0; padding-top : 0;">Mississauga,ON  | 416 839 8948 | <span class="blue">samuel.phuc.hua@gmail.com</span> | <span class="blue">https://www.linkedin.com/in/samuel-hua/</span>
    </p>
EOF


# Adding Qualification summary depends on Job Posting
htmlQualiSum () {
    local out=$1
    local file=$2
    shift 2
    # Remember to pass in list as array
    echo "<h2>Qualification Summary</h2>" >> $out
    echo "<ul>" >> $out
    arr=("$@")
    for i in "${arr[@]}"
    do
	htmlList $out $file $i
    done
    echo "</ul>" >> $out
}

# Changable sequence for each kind of job

htmlQualiSum $outfile $qualify ${sorted[@]}

# Adding Academic Project:
echo "<h2>Academic project:</h2>" >> $outfile

# List changeable
for i in 1 3 4 5
do
    htmlAcademic $i $outfile
done

#Education Pasting part

cat<<'EOF'>> $outfile
   <h2>Education</h2>
    <div class="column left white">
      <p>Bachelor of Science, Computer Science Ryerson University</p>
    </div>
    <div class="column right">
      <p>September 2020 - present</p>
    </div>
    <div class="column left white">
      <p>Expected graduation: June 2024 </p>
      <p>CGPA: 3.4/4.33</p>
    </div>
    </body>	
</html>
EOF


# Main Program
if test -z "$jobNum"
then
    resumePDF="Phuc-Hua_Resume".pdf
else
    resumePDF=Phuc-Hua_$jobNum"_Resume.pdf"
fi
.files/pdf $outfile $resumePDF

mv $resumePDF $folder

echo "File successfully save as $resumePDF in $folder"

# cleaning
rm $outfile
rm rec
