#!/bin/bash
cat .files/banner

printf "Creating your folder for your resume or having an existing folder already? \n\n
\t 1) Create files for specific folder\n\n
\t 2) Creating a new folder\n\n
\t 3) Don't create any folder, use current folder\n\n"
read -rp "Choose your option: 1,2,3 or q to quit: " choice
case "$choice" in
    1) read -rp "Go to folder: " folder
       if [[ ! -d "$folder" ]] && [[ ! -z "$folder" ]]; then 
	   echo "Folder not Found, creating new folder $folder "
	   mkdir $folder
       elif [[ -z "$folder" ]]; then
	   echo "Empty folder name, please try again "
	   mew
	   exit 1
       fi
	   folderFlag=true
       ;;
    2)
	read -rp "Create folder name: " folder
	mkdir $folder
	folderFlag=true
	;;
    q)
	exit 1
	;;
    *)
	folderFlag=false
	;;
esac

# Get Job number
read -rp "Job number: " jobNum

# Get Company name

printf "Please provide Company name \nCompany name: "
read companyName

# Get date today
day=`date "+%B %d, %Y"`

# Get company's goal
read -rp "Company's Goal: " companyGoal

[[ -z "$companyGoal" ]] && companyGoal="'s requirement"

# Generate the file (You should make the file name as the name of the company you're applying)
NameSet=$companyName
companyName="${companyName// /_}"

fileName=coverLetter_$companyName.html

.files/htmlFormat $fileName

[[ ! -z "$jobNum" ]] && printf "<p><strong>Job Number: </strong> $jobNum</p>" >> $fileName

read -rp "Availability to 8 months? " choice

message="4 months (May-September 2022)"

case "$choice" in
    8)
	message="8 months (May 2022 -January 2023)"
	;;
    16)
	message="16 months (May 2022 - September 2023)"
	;;
esac
printf "<p><strong>Availability: </strong> $message </p>" >> $fileName


printf "<p>$day</p>" >> $fileName
printf "<p>Dear Hiring Manager</p>" >> $fileName

if [ "$#" -eq 0 ]
then
    printf "<p>It is my great pleasure to apply for the Computer Science Co-op role with $NameSet as posted internally by the Ryerson Co-op Office. As a 2nd-year Computer Science Co-op student at Ryerson University who is passionate about analyzing problems, learning and analyzing malware for cybersecurity issues, this opportunity caught my attention. With my proven academic excellence and certificate, I am confident that my familiarity with Cybersecurity, Web server networking, Penetration testing knowledge would qualify me as a competitive candidate for this position.</p>" >> $fileName

    printf "<p>$NameSet $companyGoal aligns with my passion for computer security. Directly related to the requirements of this role, my main studies focus deeply on ethical hacking and prepared me well to do penetration testing. To prove this matter, I spent 1 year and a half years self-studying and preparing for the OSCP (Offensive Security Certified Professional) certificate, which focuses heavily on penetration testing and writing reports. During this time, I managed to analyze and hack into a phishing website, which then exposed the list of victims who fell into this trap to provide their login credentials. I retrieved 3500 victims' login credentials and made a short video clip out of it to raise awareness for the community, which reached up to 1200 viewers. As a Co-op student, I would love to contribute my understanding and skill in terms of protecting clients and implementing safety measures to fight against data breaches and system severity.</p>" >> $fileName
else
    printf "<p>It is my great pleasure to apply for the Computer Science Co-op role with $NameSet as posted internally by the Ryerson Co-op Office. As a 2nd-year Computer Science Co-op student at Ryerson University who is passionate about analyzing problems, learning and analyzing malware for cybersecurity issues, this opportunity caught my attention. With my proven academic excellence and certificate, I am confident that my familiarity with Cybersecurity, Scripting, Penetration testing knowledge would qualify me as a competitive candidate for this position.</p>" >> $fileName

    printf "<p>$NameSet $companyGoal aligns with my passion for automating scripting. Directly related to the requirements of this role, my main studies focus deeply on ethical hacking and prepared me well to do penetration testing. To prove this matter, I spent 1 year and a half years self-studying and preparing for the OSCP (Offensive Security Certified Professional) certificate, which focuses heavily on penetration testing and writing reports. During this time, I managed to adapt Bash scripting skill into automating my own resume and cover letter generator. My script scans for specific keywords on the job's description and generates a corresponding resume, reaching 40 resumes applications under 4 hours. As a Co-op student, I would love to contribute my understanding and skill in terms of making automated scripts to automate repeatable tasks, build new secured applications, or protect clients and implement safety measures to fight against data breaches and system severity.</p>" >> $fileName
fi

printf "<p>Thank you for your time and consideration. With the details listed above that I can bring to $NameSet, I have the commitment and a strong passion for security to succeed as a Co-op student. I would appreciate the chance to meet with you to speak more about this opportunity. 
Sincerely,</p>
" >> $fileName

printf "<p>Phuc Hua</p>\n
</body> 
</html>" >> $fileName

profile=`cat profilename | tr ' ' '_'`
if [[ -z "$jobNum" ]];
then
    namePDF=$profile"_CoverLetter.pdf"
else
    namePDF=$profile"_"$jobNum"_CoverLetter.pdf"
fi

.files/pdf $fileName $namePDF
 
rm $fileName  

echo "File successfully save as $namePDF"

printf "\nPlease provide Company Requirement \nOnce       
done, press Enter then Ctrl + D\n"

cd .files/jobkeywords

input=$(cat)

touch rec

echo $input > rec

keyw () {

    requirement=$1
    counts=0
    declare -a list=($(cat $2 | tr '\n' ' '))
    
    for item in ${list[@]}
    do
	if grep -q -i $item $requirement; then
            ((counts++))
	fi
    done
    return $counts
}

htmlList () {
    line=$3
    content=`sed "${line}q;d" $2`
    echo "<li>$content</li>" >> $1
}

htmlQualiSum () {
    local out=$1
    local file=$2
    shift 2
                                                              
    echo "<h2>Qualification Summary</h2>" >> $out
    
    echo "<ul>" >> $out
    arr=("$@")
    for i in "${arr[@]}"
    do
        htmlList $out $file $i
    done
    echo "</ul>" >> $out
}

profsum () {

    echo "<h2>Profile Summary</h2>" >> $outfile
    printf "\n<p>" >> $outfile
    cat ".files/profileSummary" >> $outfile
    printf "</p>\n" >> $outfile
}


printf "========Job Matches========\n"
touch temp

max=0
title=""
for i in *
do
    if [[ $i != "rec" ]] &&[[  $i != "README.md" ]]
    then
	keyw rec $i
	count=$?
	if [[ $count -gt $max ]]
	then
	    max=$count
	    title=$i
	fi
	printf "$i mathces:\t$count\n" >> temp
    fi
done

awk '{ $NF = "\t" $NF; print }' temp | column -t -s $'\t'
printf "===========================\n\n"

rm temp

if [[ $title == "" ]]
then
    printf "Job does not match database keywords\n Consider making more keywords \n"
    title="general"
else	 
    printf "This job suit $title best\n\n===========================\n\n"
fi

declare -a listquali

requirement="../qualification"

declare -a list=($(cat $title | tr '\n' ' '))
    
for item in ${list[@]}
do
    listquali+=(`grep -ni "$item" $requirement | cut -f1 -d:`)
done

sorted=($(echo "${listquali[@]}" | tr ' ' '\n' | sort -nu | tr '\n' ' '))

for i in $(seq 1 5)
do
    if [[ ${#sorted[@]} -lt 6 ]] && [[ ! " ${sorted[*]}" =~ " $i " ]]
    then
        sorted+=($i)
    fi
done

sorted=($(echo "${sorted[@]}" | tr ' ' '\n' | sort -nu | tr '\n' ' '))

outfile=sampleResume.html

cd ../../

#HTML making process
# Add profile
cat .files/profile > $outfile


# Making qualification
source=".files/rec"
qualify=".files/qualification"

printf "Choosing Profile Summary, Qualification Summary or both?\n "
printf "Choose an option: \n
       1) Profile Summary\n
       2) Qualification Summary\n
       3) both\n\n"
read -r -p "Your choice: " choice
case "$choice" in
    1)
	profsum
	;;
    2)
	htmlQualiSum $outfile $qualify ${sorted[@]}
	;;
    3)
	profsum
	htmlQualiSum $outfile $qualify ${sorted[@]}
	;;
    q)
	exit 1
	;;
esac

echo "<h2>Experience</h2>">> $outfile

# Adding experience here
cat .files/exper >> $outfile

# Adding Education here
cat .files/eduPart >> $outfile

finalname=`cat profilename | tr ' ' '_'`

if [[ -z "$jobnum" ]]; then
    finalname=$finalname"_"$jobNum"_Resume.pdf"
else
    finalname=$finalname"_Resume.pdf"
fi
.files/pdf $outfile $finalname
rm sampleResume.html

if [[ $folderFlag == "true" ]]; then
    mv $finalname $folder
    mv $namePDF $folder
    echo "Successfully create $finalname and $namePDF in $folder" 
else
    echo "Successfully create $finalname"
fi
